<?xml version="1.0" encoding="UTF-8"?>					
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"	
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">
						
    <!--处理访问成功-->
	<beans:bean id="oauth2AuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
		
	<!--处理访问失败-->
	<beans:bean id="oauth2AuthenticationFailureHandler" class="com.jll.sys.security.LoginFailureHandler" />
	
	<!--处理访问成功-->
	<beans:bean id="oauth2AuthenticationSuccessHandler" class="com.jll.sys.security.LoginSuccessHandler" />
	
    <!--处理访问拒绝-->
	<beans:bean id="oauth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	

	<!--处理认证点-->
    <beans:bean id="oauth2UserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />

	<beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<http pattern="/oauth/token" create-session="stateless" use-expressions="false" authentication-manager-ref="oauth2AuthenticationManager">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
		<anonymous enabled="false" />
		
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
		<http-basic/>
		<csrf disabled="true"/>
		
		<headers>
			<frame-options policy="SAMEORIGIN" />
			<header name="Access-Control-Allow-Origin" value="*" />
			<header name="Access-Control-Allow-Methods" value="POST, GET, PUT, DELETE, OPTIONS" />
       		<header name="Access-Control-Allow-Headers" value="Content-Type, Authorization, X-Requested-With" />
		</headers>
	</http>
	
	<http realm="lottery-api" pattern="/**" create-session="stateless">
		<!-- <session-management>
      		<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
  		</session-management> -->
  
		<headers>
			<frame-options policy="SAMEORIGIN" />
			<header name="Access-Control-Allow-Origin" value="*" />
			<header name="Access-Control-Allow-Methods" value="POST, GET, PUT, DELETE, OPTIONS" />
       		<header name="Access-Control-Allow-Headers" value="Content-Type, Authorization, X-Requested-With" />
		</headers>
		<csrf disabled="true"/>
		<custom-filter ref="resourceServer" before="PRE_AUTH_FILTER" />
    	<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
    	
    	
		<intercept-url method="GET" pattern="/captchas/verification-code-Img" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url method="GET" pattern="/captchas/query-sesionid" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url method="GET" pattern="/captchas" access="hasRole('ROLE_ANONYMOUS')" />
		
		<intercept-url method="GET" pattern="/settings/queryBankCodeList" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER')" />
		<intercept-url method="GET" pattern="/settings/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/settings/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/settings/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/settings/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<intercept-url method="GET" pattern="/ip-black-lists/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/ip-black-lists/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/ip-black-lists/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/ip-black-lists/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<intercept-url method="GET" pattern="/settingPlayType/lotteTypes" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_AGENT')  or hasRole('ROLE_USER')" />
		<intercept-url method="GET" pattern="/settingPlayType/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/settingPlayType/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/settingPlayType/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/settingPlayType/**" access="hasRole('ROLE_ADMIN')" />
		
		<intercept-url method="GET" pattern="/SysUser/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/SysUser/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/SysUser/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/SysUser/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<intercept-url method="GET" pattern="/permission-control/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/permission-control/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/permission-control/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/permission-control/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<intercept-url method="GET" pattern="/pay-types/QDPayType" access="hasRole('ROLE_USER') or hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/pay-types/QDPayChannel" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER')" />
		<intercept-url method="GET" pattern="/pay-types/queryAllPayType" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<intercept-url method="GET" pattern="/pay-types/ByPayTypeIdPayChannel" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		
		<intercept-url method="GET" pattern="/pay-types/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/pay-types/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/pay-types/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/pay-types/**" access="hasRole('ROLE_ADMIN')" />
		
		<intercept-url method="POST" pattern="/signup/sgnupRecSave" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER')" />
		
		<intercept-url method="GET" pattern="/users/*/attrs/login-pwd/reset/sms" access="hasRole('ROLE_ANONYMOUS')" />		
		<intercept-url method="PUT" pattern="/users/*/attrs/login-pwd/reset/sms" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url method="GET" pattern="/users/user-name/by/*" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url method="POST" pattern="/users/agents" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/users/sys-users" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="GET" pattern="/users/QDAgentNextAgent" access="hasRole('ROLE_AGENT')" />
		<intercept-url method="GET" pattern="/users/queryAllUserInfo" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/users/byUIBankList" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/users/userAddBank" access="hasRole('ROLE_AGENT')  or hasRole('ROLE_USER')" />
		<intercept-url method="PUT" pattern="/users/resetLoginPwd" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/users/queryAllUserAgent" access="hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/users/queryAgentByAgent" access="hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/users/agents/**" access="hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/users/agents/**" access="hasRole('ROLE_MANAGER')" />
		<intercept-url method="PUT" pattern="/users/agents/**" access="hasRole('ROLE_MANAGER')" />
		<intercept-url method="DELETE" pattern="/users/agents/**" access="hasRole('ROLE_MANAGER')" />		
		<intercept-url method="POST" pattern="/users/players" access="hasRole('ROLE_AGENT')" />
		<intercept-url method="POST" pattern="/users/site-msg/lists" access="hasRole('ROLE_AGENT') or hasRole('ROLE_USER') or hasRole('ROLE_CUSTOMER_SERVICE')" />
		<intercept-url method="GET" pattern="/users/site-msg/*/history-feedback" access="hasRole('ROLE_AGENT') or hasRole('ROLE_USER') or hasRole('ROLE_CUSTOMER_SERVICE')" />
		
		
		<intercept-url method="POST" pattern="/promo/lists" access="hasRole('ROLE_AGENT') or hasRole('ROLE_USER') or hasRole('ROLE_CUSTOMER_SERVICE')" />
		
		
		<intercept-url method="GET" pattern="/wallet/queryByUserIdUserAccount" access="hasRole('ROLE_USER') or hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/wallet/queryUserAccount" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/wallet/updateUserAccountState" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER')" />
		
		
		<intercept-url method="GET" pattern="/issues/getIssuesState" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/issue/*/disbale" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="PUT" pattern="/**/issue/*/manual-draw-result" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/issue/*/payout" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/issue/*/re-payout" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/issue/*/delay-payout" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/order/*/manual-payout" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="POST" pattern="/sys/oper/order/*/cancel" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		
		<intercept-url method="GET" pattern="/report/agent/transfer" access="hasRole('ROLE_AGENT')" />
		<intercept-url method="GET" pattern="/report/loyTstRecord" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER') or hasRole('ROLE_USER') or hasRole('ROLE_AGENT')" />		
		<intercept-url method="GET" pattern="/report/MReportNextTeam" access="hasRole('ROLE_AGENT')" />
		<intercept-url method="GET" pattern="/report/agent/transfer" access="hasRole('ROLE_AGENT')" />
		<intercept-url method="GET" pattern="/report/DWD/UpdateDepositState" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		<intercept-url method="GET" pattern="/report/userFlowDetail" access="hasRole('ROLE_AGENT') or hasRole('ROLE_USER')" />
		<intercept-url method="GET" pattern="/report/MReport" access="hasRole('ROLE_AGENT') or hasRole('ROLE_USER')" />
		
		
		
		<intercept-url method="POST" pattern="/payment/order/end" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_MANAGER')" />
		
		<intercept-url method="GET" pattern="/login-log/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="POST" pattern="/login-log/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="PUT" pattern="/login-log/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url method="DELETE" pattern="/login-log/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<intercept-url method="GET" pattern="/**" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_ADMIN') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER') or hasRole('ROLE_USER') or hasRole('ROLE_AGENT')" />
		<intercept-url method="POST" pattern="/**" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_ADMIN') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER') or hasRole('ROLE_USER') or hasRole('ROLE_AGENT')" />
		<intercept-url method="PUT" pattern="/**" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_ADMIN') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER') or hasRole('ROLE_USER') or hasRole('ROLE_AGENT')" />
		<intercept-url method="DELETE" pattern="/**" access="hasRole('ROLE_CUSTOMER_SERVICE') or hasRole('ROLE_ADMIN') or hasRole('ROLE_FINANCE') or hasRole('ROLE_MANAGER') or hasRole('ROLE_USER') or hasRole('ROLE_AGENT')" />
		
	</http>
	
	
    
	<oauth2:client-details-service id="clientDetailsService" >
        <oauth2:client client-id="lottery-client" authorized-grant-types="password,refresh_token" secret="secret_1" scope="read,write,trust"/>
        <oauth2:client client-id="lottery-admin" authorized-grant-types="password,refresh_token" secret="secret_1" scope="read,write,trust"/>
    </oauth2:client-details-service>
    
    <beans:bean id="oauth2ClientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService" />
    </beans:bean>
    
    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
    </authentication-manager>


	
	
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
	
    <beans:bean id="tokenServices" class="com.jll.sys.security.CusTokenService">
		<beans:property name="tokenStore" ref="tokenStore" />
        <!--允许刷新token ， 默认不允许-->
		<beans:property name="supportRefreshToken" value="true" />
	</beans:bean>
	
		
    <!--处理访问控制-->
	<beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="clientCredentialsTokenEndpointFilter" class="com.jll.sys.security.AuthFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
<!-- 		<beans:property name="authenticationFailureHandler" ref="oauth2AuthenticationFailureHandler" /> -->
<!-- 		<beans:property name="authenticationSuccessHandler" ref="oauth2AuthenticationSuccessHandler" /> -->
	</beans:bean>
	
	<!--oauth2 的server所能支持的请求类型-->
	<oauth2:authorization-server authorization-endpoint-url="/oauth/authorize"
								      token-endpoint-url="/oauth/token"
								      client-details-service-ref="clientDetailsService" 
								      token-services-ref="tokenServices" 
								      user-approval-handler-ref="oauth2UserApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password authentication-manager-ref="authenticationManager2"/>
		<!-- <oauth2:password authentication-manager-ref="authenticationManager"/> -->
	</oauth2:authorization-server>

    <!--指定spring要保护的资源，如果没有这个，访问控制的时候会说没有Authentication object：-->
	<oauth2:resource-server id="resourceServer" token-services-ref="tokenServices" />
	
	
	<authentication-manager id="authenticationManager" alias="authenticationManager">
    <authentication-provider>
      <user-service>
        <user name="gptadmin" password="gptadmin" authorities="ROLE_ADMIN,ROLE_PUBLISHER" />
        <user name="admin" password="admin" authorities="ROLE_ADMIN,ROLE_PUBLISHER" />
        <user name="publisher" password="publisher" authorities="ROLE_PUBLISHER" />
        <user name="user" password="user" authorities="ROLE_USER" />
        <user name="marissa" password="koala" authorities="ROLE_USER,ROLE_AGENT" />
        <user name="agent001" password="agent001" authorities="ROLE_USER,ROLE_AGENT" />
        <user name="test001" password="test001" authorities="ROLE_USER,ROLE_ADMIN" />
        <user name="test002" password="test002" authorities="ROLE_USER" />
        <user name="test003" password="test003" authorities="ROLE_USER" />
        <user name="zhaowei" password="zhaowei" authorities="ROLE_USER,ROLE_AGENT" />
      </user-service>
    </authentication-provider>
  </authentication-manager>
  
  <authentication-manager  id="authenticationManager2" alias="authenticationManager2">
		<authentication-provider>
			<password-encoder ref="encoder" />
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select user_name username , login_pwd password, isUserEnabled(state, unlock_time) enabled from user_info where user_name = ?"
				authorities-by-username-query="select user_name username, role.role_name authority from sys_authority auth, user_info user, sys_role role where auth.user_id = `user`.id and auth.role_id = role.id and user_name=?" />
			<!-- <user-service> <user name="user" password="password" authorities="ROLE_USER" 
				/> <user name="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN"/> 
				</user-service> -->
		</authentication-provider>
    </authentication-manager>
</beans:beans>
